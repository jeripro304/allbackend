package com.selfservicecentre.service;

import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.springframework.stereotype.Service;

import com.selfservicecentre.dto.RequestUser;
import com.selfservicecentre.entity.User;
import com.selfservicecentre.userrepo.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserSerice {
	
	private final UserRepository userRepo;
	
	
	public String addUser(RequestUser requser ) {
		List<User> allAccountNumbers =userRepo.findAll();
		String accountNo=accontNumberGenerate();
		
		 List<String> allaccno = allAccountNumbers.stream()
	                .map(User::getAccNo) //Modify to match your actual property name
	                .collect(Collectors.toList());
		 for (String i:allaccno) {
			 if (i==accountNo) {
				 System.out.println("Account number already present");
			 }
			 else System.out.println("This is new");
		 }
		
		
		
		
		User u=User.builder().accNo(accontNumberGenerate()).fname(requser.getFname())
				.lname(requser.getLname())
				.mobileno(requser.getMobileno())
				.email(requser.getEmail())
				.dob(requser.getDob())
				.address(requser.getAddress())
				.city(requser.getCity())
				.state(requser.getState())
				.zip(requser.getZip())
				.service(requser.getService()).build();
		System.out.println("this is at the add user in db");
		System.out.println(u);
		sendMail(u.getEmail(),u.getAccNo());
		return "created";
		
	}
	
	public String accontNumberGenerate() {
		Random rand=new Random();
		long accno=  (long) (Math.pow(11, 11)+ rand.nextInt(99));
		String accountNumber= Long.toString(accno);
		System.out.println(accountNumber);
		return accountNumber;
	}
	
	public void sendMail(String mail,String accno) {
		System.out.println("Outlook Email Start");

        String smtpHostServer = "smtp.office365.com";
        final String emailID = "prosync80329@outlook.com"; // inga Outlook email address
        final String password = "Jerish@2002"; // inga un outlook account password
        String toEmail = mail;
        String subject = "Outlook Email Testing Subject";
        String messageBody = "Hi,Welcome to the ProSync Network,Your Account Number is :"+accno; // inga type mail body
        Properties props = new Properties();
        props.put("mail.smtp.host", smtpHostServer);
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");

        Session session = Session.getInstance(props, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(emailID, password);
            }
        });

        sendEmail(session, emailID, subject, messageBody,toEmail);
	}
	public static void sendEmail(Session session, String fromEmail, String subject, String body,String toEmail){
        try
        {
            MimeMessage msg = new MimeMessage(session);
            //set message headers
            msg.addHeader("Content-type", "text/HTML; charset=UTF-8");
            msg.addHeader("format", "flowed");
            msg.addHeader("Content-Transfer-Encoding", "8bit");

            msg.setFrom(new InternetAddress(fromEmail, "ProSync"));

            msg.setReplyTo(InternetAddress.parse(toEmail, false));

            msg.setSubject(subject, "UTF-8");

            msg.setText(body, "UTF-8");

            msg.setSentDate(new Date());

            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail, false));
            System.out.println("Message is ready");
            Transport.send(msg);

            System.out.println("EMail Sent Successfully!!");
        }
        catch (Exception e) {
        	e.printStackTrace();
        }
	}

}
